export const L2ReverseRegistrar = [
  {
    type: 'constructor',
    inputs: [
      {
        name: '_registry',
        type: 'address',
        internalType: 'contract ModularENS',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'clearRecords',
    inputs: [{ name: 'addr', type: 'address', internalType: 'address' }],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'clearRecordsWithSignature',
    inputs: [
      { name: 'addr', type: 'address', internalType: 'address' },
      {
        name: 'inceptionDate',
        type: 'uint256',
        internalType: 'uint256',
      },
      { name: 'signature', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'clone',
    inputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'getCloneAddress',
    inputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [
      {
        name: 'predictedAddress',
        type: 'address',
        internalType: 'address',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'lastUpdated',
    inputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'multicall',
    inputs: [{ name: 'data', type: 'bytes[]', internalType: 'bytes[]' }],
    outputs: [{ name: 'results', type: 'bytes[]', internalType: 'bytes[]' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'multicallWithNodeCheck',
    inputs: [
      { name: 'nodehash', type: 'bytes32', internalType: 'bytes32' },
      { name: 'data', type: 'bytes[]', internalType: 'bytes[]' },
    ],
    outputs: [{ name: 'results', type: 'bytes[]', internalType: 'bytes[]' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'name',
    inputs: [{ name: 'node', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [{ name: '', type: 'string', internalType: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'node',
    inputs: [{ name: 'addr', type: 'address', internalType: 'address' }],
    outputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'owner',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'registerAddrNode',
    inputs: [],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'registry',
    inputs: [],
    outputs: [
      { name: '', type: 'address', internalType: 'contract ModularENS' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'renounceOwnership',
    inputs: [],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setName',
    inputs: [{ name: 'name', type: 'string', internalType: 'string' }],
    outputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setNameForAddr',
    inputs: [
      { name: 'addr', type: 'address', internalType: 'address' },
      { name: 'name', type: 'string', internalType: 'string' },
    ],
    outputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setNameForAddrWithSignature',
    inputs: [
      { name: 'addr', type: 'address', internalType: 'address' },
      { name: 'name', type: 'string', internalType: 'string' },
      {
        name: 'inceptionDate',
        type: 'uint256',
        internalType: 'uint256',
      },
      { name: 'signature', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setNameForAddrWithSignatureAndOwnable',
    inputs: [
      {
        name: 'contractAddr',
        type: 'address',
        internalType: 'address',
      },
      { name: 'owner', type: 'address', internalType: 'address' },
      { name: 'name', type: 'string', internalType: 'string' },
      {
        name: 'inceptionDate',
        type: 'uint256',
        internalType: 'uint256',
      },
      { name: 'signature', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setNameFromRegistrar',
    inputs: [
      { name: 'tldNode', type: 'bytes32', internalType: 'bytes32' },
      { name: 'addr', type: 'address', internalType: 'address' },
      { name: 'name', type: 'string', internalType: 'string' },
    ],
    outputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setText',
    inputs: [
      { name: 'key', type: 'string', internalType: 'string' },
      { name: 'value', type: 'string', internalType: 'string' },
    ],
    outputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setTextForAddr',
    inputs: [
      { name: 'addr', type: 'address', internalType: 'address' },
      { name: 'key', type: 'string', internalType: 'string' },
      { name: 'value', type: 'string', internalType: 'string' },
    ],
    outputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setTextForAddrWithSignature',
    inputs: [
      { name: 'addr', type: 'address', internalType: 'address' },
      { name: 'key', type: 'string', internalType: 'string' },
      { name: 'value', type: 'string', internalType: 'string' },
      {
        name: 'inceptionDate',
        type: 'uint256',
        internalType: 'uint256',
      },
      { name: 'signature', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setTextForAddrWithSignatureAndOwnable',
    inputs: [
      {
        name: 'contractAddr',
        type: 'address',
        internalType: 'address',
      },
      { name: 'owner', type: 'address', internalType: 'address' },
      { name: 'key', type: 'string', internalType: 'string' },
      { name: 'value', type: 'string', internalType: 'string' },
      {
        name: 'inceptionDate',
        type: 'uint256',
        internalType: 'uint256',
      },
      { name: 'signature', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setTextFromRegistrar',
    inputs: [
      { name: 'tldNode', type: 'bytes32', internalType: 'bytes32' },
      { name: 'addr', type: 'address', internalType: 'address' },
      { name: 'key', type: 'string', internalType: 'string' },
      { name: 'value', type: 'string', internalType: 'string' },
    ],
    outputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'supportsInterface',
    inputs: [{ name: 'interfaceID', type: 'bytes4', internalType: 'bytes4' }],
    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],
    stateMutability: 'pure',
  },
  {
    type: 'function',
    name: 'text',
    inputs: [
      { name: 'node', type: 'bytes32', internalType: 'bytes32' },
      { name: 'key', type: 'string', internalType: 'string' },
    ],
    outputs: [{ name: '', type: 'string', internalType: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'transferOwnership',
    inputs: [{ name: 'newOwner', type: 'address', internalType: 'address' }],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'updateRecord',
    inputs: [
      {
        name: 'record',
        type: 'tuple',
        internalType: 'struct ModularENS.Record',
        components: [
          { name: 'owner', type: 'address', internalType: 'address' },
          {
            name: 'resolver',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nameHash',
            type: 'bytes32',
            internalType: 'bytes32',
          },
          {
            name: 'expiration',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'registrationTime',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'updatedTimestamp',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'parentNode',
            type: 'bytes32',
            internalType: 'bytes32',
          },
          { name: 'tldNode', type: 'bytes32', internalType: 'bytes32' },
          { name: 'nonce', type: 'uint256', internalType: 'uint256' },
          { name: 'label', type: 'string', internalType: 'string' },
          { name: 'data', type: 'bytes', internalType: 'bytes' },
        ],
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'event',
    name: 'NameChanged',
    inputs: [
      {
        name: 'node',
        type: 'bytes32',
        indexed: true,
        internalType: 'bytes32',
      },
      {
        name: 'name',
        type: 'string',
        indexed: false,
        internalType: 'string',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'OwnershipTransferred',
    inputs: [
      {
        name: 'previousOwner',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'newOwner',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'ReverseClaimed',
    inputs: [
      {
        name: 'addr',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'node',
        type: 'bytes32',
        indexed: true,
        internalType: 'bytes32',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'TextChanged',
    inputs: [
      {
        name: 'node',
        type: 'bytes32',
        indexed: true,
        internalType: 'bytes32',
      },
      {
        name: 'indexedKey',
        type: 'string',
        indexed: true,
        internalType: 'string',
      },
      {
        name: 'key',
        type: 'string',
        indexed: false,
        internalType: 'string',
      },
      {
        name: 'value',
        type: 'string',
        indexed: false,
        internalType: 'string',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'VersionChanged',
    inputs: [
      {
        name: 'node',
        type: 'bytes32',
        indexed: true,
        internalType: 'bytes32',
      },
      {
        name: 'newVersion',
        type: 'uint64',
        indexed: false,
        internalType: 'uint64',
      },
    ],
    anonymous: false,
  },
  { type: 'error', name: 'InvalidSignature', inputs: [] },
  { type: 'error', name: 'NotOwnerOfContract', inputs: [] },
  { type: 'error', name: 'SetTextNotSupported', inputs: [] },
  { type: 'error', name: 'SignatureOutOfDate', inputs: [] },
  {
    type: 'error',
    name: 'StringsInsufficientHexLength',
    inputs: [
      { name: 'value', type: 'uint256', internalType: 'uint256' },
      { name: 'length', type: 'uint256', internalType: 'uint256' },
    ],
  },
  { type: 'error', name: 'Unauthorised', inputs: [] },
] as const;
