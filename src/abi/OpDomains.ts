export const OpDomains = [
  {
    type: 'constructor',
    inputs: [
      {
        name: '_registry',
        type: 'address',
        internalType: 'contract ModularENS',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'approve',
    inputs: [
      { name: 'to', type: 'address', internalType: 'address' },
      { name: 'tokenId', type: 'uint256', internalType: 'uint256' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'balanceOf',
    inputs: [{ name: 'owner', type: 'address', internalType: 'address' }],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'extendExpiry',
    inputs: [
      { name: 'node', type: 'bytes32', internalType: 'bytes32' },
      { name: 'expiration', type: 'uint256', internalType: 'uint256' },
      { name: 'signature', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'getApproved',
    inputs: [{ name: 'tokenId', type: 'uint256', internalType: 'uint256' }],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'isApprovedForAll',
    inputs: [
      { name: 'owner', type: 'address', internalType: 'address' },
      { name: 'operator', type: 'address', internalType: 'address' },
    ],
    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'name',
    inputs: [],
    outputs: [{ name: '', type: 'string', internalType: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'ownerOf',
    inputs: [{ name: 'tokenId', type: 'uint256', internalType: 'uint256' }],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'register',
    inputs: [
      { name: 'label', type: 'string', internalType: 'string' },
      { name: 'owner', type: 'address', internalType: 'address' },
      { name: 'expiration', type: 'uint256', internalType: 'uint256' },
      { name: 'fuses', type: 'uint256', internalType: 'uint256' },
      { name: 'reverseRecord', type: 'bool', internalType: 'bool' },
      {
        name: 'resolverCalldata',
        type: 'bytes[]',
        internalType: 'bytes[]',
      },
      { name: 'signature', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'registry',
    inputs: [],
    outputs: [
      { name: '', type: 'address', internalType: 'contract ModularENS' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'resolverCall',
    inputs: [
      { name: 'node', type: 'bytes32', internalType: 'bytes32' },
      { name: 'resolverCalldata', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [{ name: '', type: 'bytes', internalType: 'bytes' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'resolverDiamondCut',
    inputs: [
      { name: 'node', type: 'bytes32', internalType: 'bytes32' },
      {
        name: 'facetCuts',
        type: 'tuple[]',
        internalType: 'struct IDiamondWritableInternal.FacetCut[]',
        components: [
          { name: 'target', type: 'address', internalType: 'address' },
          {
            name: 'action',
            type: 'uint8',
            internalType: 'enum IDiamondWritableInternal.FacetCutAction',
          },
          {
            name: 'selectors',
            type: 'bytes4[]',
            internalType: 'bytes4[]',
          },
        ],
      },
      { name: 'target', type: 'address', internalType: 'address' },
      { name: 'data', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'safeTransferFrom',
    inputs: [
      { name: 'from', type: 'address', internalType: 'address' },
      { name: 'to', type: 'address', internalType: 'address' },
      { name: 'tokenId', type: 'uint256', internalType: 'uint256' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'safeTransferFrom',
    inputs: [
      { name: 'from', type: 'address', internalType: 'address' },
      { name: 'to', type: 'address', internalType: 'address' },
      { name: 'tokenId', type: 'uint256', internalType: 'uint256' },
      { name: 'data', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setApprovalForAll',
    inputs: [
      { name: 'operator', type: 'address', internalType: 'address' },
      { name: 'approved', type: 'bool', internalType: 'bool' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'supportsInterface',
    inputs: [{ name: 'interfaceId', type: 'bytes4', internalType: 'bytes4' }],
    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'symbol',
    inputs: [],
    outputs: [{ name: '', type: 'string', internalType: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'tokenURI',
    inputs: [{ name: 'tokenId', type: 'uint256', internalType: 'uint256' }],
    outputs: [{ name: '', type: 'string', internalType: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'transferFrom',
    inputs: [
      { name: 'from', type: 'address', internalType: 'address' },
      { name: 'to', type: 'address', internalType: 'address' },
      { name: 'tokenId', type: 'uint256', internalType: 'uint256' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'updateRecord',
    inputs: [
      {
        name: 'record',
        type: 'tuple',
        internalType: 'struct ModularENS.Record',
        components: [
          { name: 'owner', type: 'address', internalType: 'address' },
          {
            name: 'resolver',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nameHash',
            type: 'bytes32',
            internalType: 'bytes32',
          },
          {
            name: 'expiration',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'registrationTime',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'updatedTimestamp',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'parentNode',
            type: 'bytes32',
            internalType: 'bytes32',
          },
          { name: 'tldNode', type: 'bytes32', internalType: 'bytes32' },
          { name: 'nonce', type: 'uint256', internalType: 'uint256' },
          { name: 'label', type: 'string', internalType: 'string' },
          { name: 'data', type: 'bytes', internalType: 'bytes' },
        ],
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'event',
    name: 'Approval',
    inputs: [
      {
        name: 'owner',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'approved',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'tokenId',
        type: 'uint256',
        indexed: true,
        internalType: 'uint256',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'ApprovalForAll',
    inputs: [
      {
        name: 'owner',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'operator',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'approved',
        type: 'bool',
        indexed: false,
        internalType: 'bool',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'Transfer',
    inputs: [
      {
        name: 'from',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'to',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'tokenId',
        type: 'uint256',
        indexed: true,
        internalType: 'uint256',
      },
    ],
    anonymous: false,
  },
  { type: 'error', name: 'Unauthorised', inputs: [] },
] as const;
