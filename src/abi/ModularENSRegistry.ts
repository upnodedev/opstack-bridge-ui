export const ModularENSRegistry = [
  {
    type: 'constructor',
    inputs: [
      { name: '_root', type: 'address', internalType: 'address' },
      {
        name: '_merkleForest',
        type: 'address',
        internalType: 'contract MerkleForest',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'data',
    inputs: [{ name: 'node', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [{ name: '', type: 'bytes', internalType: 'bytes' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'dnsEncoded',
    inputs: [{ name: 'node', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [{ name: 'dnsName', type: 'bytes', internalType: 'bytes' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'expiration',
    inputs: [{ name: 'node', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'isApprovedForAll',
    inputs: [
      { name: '_owner', type: 'address', internalType: 'address' },
      { name: '_operator', type: 'address', internalType: 'address' },
    ],
    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'merkleForest',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract MerkleForest',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'name',
    inputs: [{ name: 'node', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [{ name: '', type: 'string', internalType: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'nodeMerkleRoot',
    inputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'owner',
    inputs: [{ name: 'node', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'parentNode',
    inputs: [{ name: 'node', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'record',
    inputs: [{ name: 'node', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct ModularENS.Record',
        components: [
          { name: 'owner', type: 'address', internalType: 'address' },
          {
            name: 'resolver',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nameHash',
            type: 'bytes32',
            internalType: 'bytes32',
          },
          {
            name: 'expiration',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'registrationTime',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'updatedTimestamp',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'parentNode',
            type: 'bytes32',
            internalType: 'bytes32',
          },
          { name: 'tldNode', type: 'bytes32', internalType: 'bytes32' },
          { name: 'nonce', type: 'uint256', internalType: 'uint256' },
          { name: 'label', type: 'string', internalType: 'string' },
          { name: 'data', type: 'bytes', internalType: 'bytes' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'recordExists',
    inputs: [{ name: 'node', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'register',
    inputs: [
      { name: '_parentNode', type: 'bytes32', internalType: 'bytes32' },
      { name: '_owner', type: 'address', internalType: 'address' },
      { name: '_expiration', type: 'uint256', internalType: 'uint256' },
      { name: '_label', type: 'string', internalType: 'string' },
      { name: '_data', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [
      { name: '_nameHash', type: 'bytes32', internalType: 'bytes32' },
      { name: '_merkleRoot', type: 'bytes32', internalType: 'bytes32' },
      { name: '_nonce', type: 'uint256', internalType: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'registerTLD',
    inputs: [
      {
        name: '_tldObj',
        type: 'tuple',
        internalType: 'struct ModularENS.TLD',
        components: [
          { name: 'chainId', type: 'uint256', internalType: 'uint256' },
          {
            name: 'nameHash',
            type: 'bytes32',
            internalType: 'bytes32',
          },
          {
            name: 'registrar',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'resolver',
            type: 'address',
            internalType: 'address',
          },
          { name: 'name', type: 'string', internalType: 'string' },
        ],
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'resolver',
    inputs: [{ name: 'node', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'resolverCall',
    inputs: [
      { name: '_node', type: 'bytes32', internalType: 'bytes32' },
      { name: '_calldata', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [{ name: '', type: 'bytes', internalType: 'bytes' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'resolverDiamondCut',
    inputs: [
      { name: '_node', type: 'bytes32', internalType: 'bytes32' },
      {
        name: '_facetCuts',
        type: 'tuple[]',
        internalType: 'struct IDiamondWritableInternal.FacetCut[]',
        components: [
          { name: 'target', type: 'address', internalType: 'address' },
          {
            name: 'action',
            type: 'uint8',
            internalType: 'enum IDiamondWritableInternal.FacetCutAction',
          },
          {
            name: 'selectors',
            type: 'bytes4[]',
            internalType: 'bytes4[]',
          },
        ],
      },
      { name: '_target', type: 'address', internalType: 'address' },
      { name: '_data', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'root',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'setApprovalForAll',
    inputs: [
      { name: '_operator', type: 'address', internalType: 'address' },
      { name: '_approved', type: 'bool', internalType: 'bool' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setData',
    inputs: [
      { name: '_node', type: 'bytes32', internalType: 'bytes32' },
      { name: '_data', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setExpiration',
    inputs: [
      { name: '_node', type: 'bytes32', internalType: 'bytes32' },
      { name: '_expiration', type: 'uint256', internalType: 'uint256' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setOwner',
    inputs: [
      { name: '_node', type: 'bytes32', internalType: 'bytes32' },
      { name: '_owner', type: 'address', internalType: 'address' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'tld',
    inputs: [{ name: 'tldNodeHash', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct ModularENS.TLD',
        components: [
          { name: 'chainId', type: 'uint256', internalType: 'uint256' },
          {
            name: 'nameHash',
            type: 'bytes32',
            internalType: 'bytes32',
          },
          {
            name: 'registrar',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'resolver',
            type: 'address',
            internalType: 'address',
          },
          { name: 'name', type: 'string', internalType: 'string' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'tldNode',
    inputs: [{ name: 'node', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'ttl',
    inputs: [{ name: 'node', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [{ name: '', type: 'uint64', internalType: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'update',
    inputs: [
      { name: '_nameHash', type: 'bytes32', internalType: 'bytes32' },
      { name: '_owner', type: 'address', internalType: 'address' },
      { name: '_expiration', type: 'uint256', internalType: 'uint256' },
    ],
    outputs: [
      { name: '_merkleRoot', type: 'bytes32', internalType: 'bytes32' },
      { name: '_nonce', type: 'uint256', internalType: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'event',
    name: 'ApprovalForAll',
    inputs: [
      {
        name: 'owner',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'operator',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'approved',
        type: 'bool',
        indexed: false,
        internalType: 'bool',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'NewOwner',
    inputs: [
      {
        name: 'node',
        type: 'bytes32',
        indexed: true,
        internalType: 'bytes32',
      },
      {
        name: 'label',
        type: 'bytes32',
        indexed: true,
        internalType: 'bytes32',
      },
      {
        name: 'owner',
        type: 'address',
        indexed: false,
        internalType: 'address',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'NewResolver',
    inputs: [
      {
        name: 'node',
        type: 'bytes32',
        indexed: true,
        internalType: 'bytes32',
      },
      {
        name: 'resolver',
        type: 'address',
        indexed: false,
        internalType: 'address',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'NewTLD',
    inputs: [
      {
        name: 'tldNode',
        type: 'bytes32',
        indexed: true,
        internalType: 'bytes32',
      },
      {
        name: 'namehash',
        type: 'bytes32',
        indexed: true,
        internalType: 'bytes32',
      },
      {
        name: 'registrar',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'tld',
        type: 'tuple',
        indexed: false,
        internalType: 'struct ModularENS.TLD',
        components: [
          { name: 'chainId', type: 'uint256', internalType: 'uint256' },
          {
            name: 'nameHash',
            type: 'bytes32',
            internalType: 'bytes32',
          },
          {
            name: 'registrar',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'resolver',
            type: 'address',
            internalType: 'address',
          },
          { name: 'name', type: 'string', internalType: 'string' },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'NewTTL',
    inputs: [
      {
        name: 'node',
        type: 'bytes32',
        indexed: true,
        internalType: 'bytes32',
      },
      {
        name: 'ttl',
        type: 'uint64',
        indexed: false,
        internalType: 'uint64',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'RecordChanged',
    inputs: [
      {
        name: 'tldNode',
        type: 'bytes32',
        indexed: true,
        internalType: 'bytes32',
      },
      {
        name: 'namehash',
        type: 'bytes32',
        indexed: true,
        internalType: 'bytes32',
      },
      {
        name: 'owner',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'merkleRoot',
        type: 'bytes32',
        indexed: false,
        internalType: 'bytes32',
      },
      {
        name: 'record',
        type: 'tuple',
        indexed: false,
        internalType: 'struct ModularENS.Record',
        components: [
          { name: 'owner', type: 'address', internalType: 'address' },
          {
            name: 'resolver',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nameHash',
            type: 'bytes32',
            internalType: 'bytes32',
          },
          {
            name: 'expiration',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'registrationTime',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'updatedTimestamp',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'parentNode',
            type: 'bytes32',
            internalType: 'bytes32',
          },
          { name: 'tldNode', type: 'bytes32', internalType: 'bytes32' },
          { name: 'nonce', type: 'uint256', internalType: 'uint256' },
          { name: 'label', type: 'string', internalType: 'string' },
          { name: 'data', type: 'bytes', internalType: 'bytes' },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'Transfer',
    inputs: [
      {
        name: 'node',
        type: 'bytes32',
        indexed: true,
        internalType: 'bytes32',
      },
      {
        name: 'owner',
        type: 'address',
        indexed: false,
        internalType: 'address',
      },
    ],
    anonymous: false,
  },
  { type: 'error', name: 'AlreadyRegistered', inputs: [] },
  { type: 'error', name: 'BadTLD', inputs: [] },
  { type: 'error', name: 'Impossible', inputs: [] },
  { type: 'error', name: 'NotPrimaryChain', inputs: [] },
  { type: 'error', name: 'NotRegistered', inputs: [] },
  { type: 'error', name: 'NotRegistrar', inputs: [] },
  { type: 'error', name: 'NotRoot', inputs: [] },
  { type: 'error', name: 'RegistrarNotDeployed', inputs: [] },
  { type: 'error', name: 'ResolverRequired', inputs: [] },
] as const;
